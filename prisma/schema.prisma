// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(USER)

  BookedHistory BookedHistory[]
  Properties    Property[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum Role {
  USER
  ADMIN
  PARTNER
}

model BookedHistory {
  id String @id @default(uuid())

  PropertiesBooked String
  properties       Property @relation(fields: [PropertiesBooked], references: [id])

  UserBooked String
  booked     User   @relation(fields: [UserBooked], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id          String  @id @default(uuid())
  name        String  @default("My Property")
  description String?
  imgUrl      String?
  slug        String? @unique
  confirmed   Boolean @default(false)

  OwnerId String
  ownerId User?  @relation(fields: [OwnerId], references: [id])

  PropertyType String
  propertyType PropertyType? @relation(fields: [PropertyType], references: [name])

  Booked          BookedHistory[]
  LocationDetails PropertyLocation[]
  RoomOption PropertyRoomOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyLocation {
  id       String  @id @default(uuid())
  country  String? 
  state    String?
  city     String?
  county  String?
  postcode String?

  latitude  Decimal?
  longitude Decimal?

  propertyId String?   @unique
  property   Property? @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyRoomOption {
  id String @id @default(uuid())

  propertyId String?
  property Property? @relation(fields: [propertyId], references: [id])

  RoomTypes RoomTypes[]
  GuestsTypes GuestsType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomTypes {
  id String @id @default(uuid())
  RoomTypes String?

  PropertyRoomOptId String?
  properties_rooms PropertyRoomOption? @relation(fields: [PropertyRoomOptId], references: [id])

  BedTypes BedTypes[]
  RoomFacilities RoomTypesFacilities[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model BedTypes {
  id String @id @default(uuid())
  type String? 

  RoomTypesId String?
  room_type RoomTypes? @relation(fields: [RoomTypesId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model RoomTypesFacilities {
  id String @unique @default(uuid())
  facility String?

  RoomTypesId String?
  room_type RoomTypes? @relation(fields: [RoomTypesId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuestsType {
  id String @id @default(uuid())

  PropertyRoomOptId String?
  properties_rooms PropertyRoomOption? @relation(fields: [PropertyRoomOptId], references: [id])
}

model PropertyType {
  id   String @id @default(uuid())
  name String @unique

  Properties Property[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
